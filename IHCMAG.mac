|- IHCMAG.mac - By IHC385 - Modded by ch0pz
|- Automatic Beastlord bot - 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcmagutil.inc
#include IHCMercs\ihcevents.inc
#warning
#bind SetVarInt		/setvarint
#bind CmdList       /ihchelp
#Event NotOnTarget	"#*#You cannot see your target#*#"
#Event NotOnTarget	"#*#Your target is too far away#*#"
#Event WornOff      "Your #1# spell has worn off of #*#."
#Event GroupChange	"#*#has joined the group#*#"

Sub Main

	/delay ${Math.Rand[10]}
	/doevents flush
	/declare MacroName       	string outer IHCMAG
	/declare MacroPath       	string outer IHCMercs\IHCMAG
	/declare IHCVersion       	string outer 2.11b
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini
	/call MagSetup
	/call VarSetup
	/call AliasSetup
	/call SetSpells
	/call SetControlToon
	/call LoadSpellBar
	/pet hold on
	/call SetPetMode
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${assistid}==${Me.ID}) {
		/echo \aw I am Main Assist
	} else {
		/echo \aw Assisting \ay >> \ag ${assistname} \ay << \aw at \ag ${AutoAssistAt}%
	}
	/if (${UseZoneLogic}) {
		/call ZoneEventChk
	}
 :mainloop
	/if (${changetoini}==1) /call INIChanges
	/if (${Me.Zoning}) /call Zoning
	/if (${Me.Hovering}) /call DeathSub
	/if (${Cursor.ID}) /call BagModRods
	/call IDUpdateCheck
	/if ((${Me.XTarget[1].ID} || (${Group.MainAssist.ID} && ${Group.MainAssist.ID}!=${Me.ID} && ${Target.ID}!=${Me.GroupAssistTarget.ID}) || ${SpawnCount[npc radius ${AssistRange} zradius 15 targetable playerstate 4]} || ${FollowMarkTarget}) && !${BackOffFlag} && ${DoAutoTarget}) /call FindTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag} && ${DoAutoEngage}) /call EngageTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.ID}==${autotargetid} && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<${AssistRange} && ${DoDPS} && (${DPSRecastTimer}==0) && !${BackOffFlag} && ${Ok2Assist}) /call CombatDiscs
	/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${DoBuffs}) /call BuffCheck
	/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${groupbufftimer}==0 && ${DoBuffs}) /call BuffGroup
	/if (${Spawn[=${FollowToonName}].ID} && !${MoveTo.Moving} && ${Stick.Status.Equal[OFF]} && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID} || ${Spawn[id ${assistid}].Distance}>${AssistRange} || (!${Spawn[id ${assistid}].LineOfSight}))) /call FollowToon
	/if (${Spawn[=${FollowToonName}].ID} && (${Me.Casting.ID} || ${Me.XTarget[1].ID}) && ${AdvPath.Following}) /squelch /afollow off
	/if (!${Me.XTarget[1].ID}&& !${KillTargetID}) /call AutoCampCheck
	/if (${UseModRods}) /call ClickModRoD
	/if (${DoMed} && ${spellrememtimer}==0) /call AutoMed
	/if (${UseZoneLogic} && ${EventSetupFlag}) {
		/call EventLogic${EventSetupFlag}
	}
	/if (((!${Spawn[targetable id ${KillTargetID}].ID}) || ${Spawn[corpse id ${KillTargetID}].ID}) && ${KillTargetID}!=0) {
		/varset KillTargetID 0
		/varset SpawnSearchType npc
		/varset autotargetid 0
	}
	/if (${Me.Pet.Combat} && !${Ok2Assist}) {
		/pet back off
	}
	/if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID} || ${Me.Corrupted.ID} || ${Me.Snared.ID} || ${Me.Mezzed.ID} || ${Me.Charmed.ID}) && ${BegTimer}==0 && ${DoGroupBeg}) /call BegForCure
	/doevents
	/goto :mainloop

/return

|----------------------------------------------------------------------------
|- SUB: Pet Mode
|---------------------------------------------------------------------------- 
Sub SetPetMode

	/if (${DoPetTank}) {
		/if (${PetTank}==0) /varset PetTank 1
		/pet taunt on
		/echo \aw Pet Tanking is :\ag ON
	} else {
		/pet taunt off
		/if (${PetTank}==1) /varset PetTank 0
		/echo \aw Pet Tanking is :\ar OFF
	}

/return
|----------------------------------------------------------------------------
|- SUB: BuffGroup
|---------------------------------------------------------------------------- 
Sub BuffGroup

	/declare bmember			int local 0
	/if (${groupbufftimer}==0) /varset groupbufftimer 10s
	/for bmember 0 to ${Group}
		/if (${Group.Member[${bmember}].Distance}<100 && !${Group.Member[${bmember}].OtherZone} && (!${Me.Casting.ID}) && ${DanNet.Peers[${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower}]}) {
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${DamageShield}].ID" "tmpbuffid" "int"
			/if (!${tmpbuffid} && ${Me.Book[${DamageShield}]} && ${Me.CurrentMana}>${Spell[${DamageShield}].Mana} && (!${Me.Casting.ID}) && !${Select[${Group.Member[${bmember}].Class.ShortName},SHD,PAL,WAR,RNG,BER,ROG,MNK]} && ${UseDmgShield}) {
				/call SpellQueue "${DamageShield}" ${Group.Member[${bmember}].ID}
				/varset spellrememtimer 5s
				/delay 10
			}		
		}
	/next bmember
	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
	/if (${Group.MainAssist.ID} && ${Target.ID}!=${Group.MainAssist.ID}) {
		/target id ${Group.MainAssist.ID}
		/if (${ReTargetDelay}==0) /varset ReTargetDelay 1m
		/if (${autotargetid}) /varset autotargetid 0
	}

/return
|----------------------------------------------------------------------------
|- SUB: CombatDiscs
|---------------------------------------------------------------------------- 
Sub CombatDiscs
	/doevents
	/call FindTarget
	/if (${Target.CurrentHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<=${AssistRange} && ${Ok2Assist}) {
|- Pet Attack
		/if ((!${Me.Pet.Combat} || ${Pet.Target.ID}!=${autotargetid}) && ${Me.Pet.ID} && ${Target.Type.Equal[NPC]} && ${Target.ID} && ${Target.CurrentHPs}<=${AutoAssistAt} && ${UsePet}) {
			/pet attack 
			/pet swarm
		}
	}
|- DPS SPELLS
		/if (${Me.PctMana}>=${Manatonuke}) {
	| SwarmPet
			/if (${UseSwarmpet} && ${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${SwarmPet}].RankName}]} && ${Me.CurrentMana}>${Spell[${SwarmPet}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${SwarmPet}].RankName}" ${autotargetid}
	| DichoSpell
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${DichoSpell}].RankName}]} && ${Me.CurrentMana}>${Spell[${DichoSpell}].Mana} && !${Me.Song[Dichotomic Companion 1].ID} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${DichoSpell}].RankName}" ${autotargetid}
	| Nuke1
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell1}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<90 && ${Me.CurrentMana}>${Spell[${NukeSpell1}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell1}].RankName}" ${autotargetid}
	| Nuke2
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell2}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<88 && ${Me.CurrentMana}>${Spell[${NukeSpell2}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell2}].RankName}" ${autotargetid}
	| Nuke3
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell3}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<86 && ${Me.CurrentMana}>${Spell[${NukeSpell3}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell3}].RankName}" ${autotargetid}
	| Nuke4
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell4}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<85 && ${Me.CurrentMana}>${Spell[${NukeSpell4}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell4}].RankName}" ${autotargetid}
	| Nuke5
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell5}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<85 && ${Me.CurrentMana}>${Spell[${NukeSpell5}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell5}].RankName}" ${autotargetid}
	| TwinCast
			} else /if (${Cast.Status.Equal[I]} && ${Target.Named} && ${Me.SpellReady[${Spell[${TwinSpell}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<85 && ${Me.CurrentMana}>${Spell[${TwinSpell}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${TwinSpell}].RankName}" ${autotargetid}
			}
			
			/if (${CastResult.Equal[CAST_SUCCESS]} || ${CastResult.Equal[CAST_RESIST]}) /varset DPSRecastTimer 0
		}
		
/return

|----------------------------------------------------------------------------
|- SUB: BuffCheck
|----------------------------------------------------------------------------
Sub BuffCheck	

	/if (${UsePet} && !${Me.Pet.ID} && ${Cast.Status.Equal[I]} && ${Me.Book[${PetSpell}]} && ${Me.CurrentMana}>${Spell[${PetSpell}].Mana}) {
		/call SpellQueue "${PetSpell}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${Spell[${ManaRegenBuff}].RankName}].ID} && (!${Me.Casting.ID}) && ${Me.Book[${ManaRegenBuff}]} && ${Me.CurrentMana}>${Spell[${ManaRegenBuff}].Mana}) {
		/call SpellQueue "${ManaRegenBuff}" ${Me.ID}
		/varset spellrememtimer 5s 
	} else /if (!${Me.Buff[${Spell[${MeleeShield}].RankName}].ID} && (!${Me.Casting.ID}) && ${Me.Book[${MeleeShield}]} && ${Me.CurrentMana}>${Spell[${MeleeShield}].Mana}) {
		/call SpellQueue "${MeleeShield}" ${Me.ID}
		/varset spellrememtimer 5s 
	} else /if (!${Me.Buff[${Spell[${ShieldSpell}].RankName}].ID} && (!${Me.Casting.ID}) && ${Me.Book[${ShieldSpell}]} && ${Me.CurrentMana}>${Spell[${ShieldSpell}].Mana} && ${UseShield}) {
		/call SpellQueue "${ShieldSpell}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (${UsePet} && !${DoPetTank} && !${Me.Pet.Buff[${PetOffenseBuff}]} &&  ${Spell[${PetOffenseBuff}].StacksPet} && (!${Me.Casting.ID}) && ${Me.Book[${PetOffenseBuff}]} && ${Me.CurrentMana}>${Spell[${PetOffenseBuff}].Mana}) {
		/call SpellQueue "${PetOffenseBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (${UsePet} && ${DoPetTank} && !${Me.Pet.Buff[${PetDefenseBuff}]} &&  ${Spell[${PetDefenseBuff}].StacksPet} && (!${Me.Casting.ID}) && ${Me.Book[${PetDefenseBuff}]} && ${Me.CurrentMana}>${Spell[${PetDefenseBuff}].Mana}) {
		/call SpellQueue "${PetDefenseBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (${UsePet} && !${Me.Pet.Buff[${PetHaste}]} &&  ${Spell[${PetHaste}].StacksPet} && (!${Me.Casting.ID}) && ${Me.Book[${PetHaste}]} && ${Me.CurrentMana}>${Spell[${PetHaste}].Mana}) {
		/call SpellQueue "${PetHaste}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Gem[${spellmisc}].Name.Equal[${miscspellremem}]} && ${spellrememtimer}==0 && ${miscspellremem.NotEqual[NULL]}) {
		/call LoadSpellGem "${miscspellremem}" ${spellmisc}
	}
		
	/if (${Group.MainAssist.ID} && ${ReTargetDelay}==0 && ${Target.ID}!=${Group.MainAssist.ID}) {
		/target id ${Group.MainAssist.ID}
		/varset ReTargetDelay 1m
		/varset autotargetid 0
	}
/return	

|----------------------------------------------------------------------------
|- SUB: Event_WornOff
|----------------------------------------------------------------------------

Sub Event_WornOff

	/varset groupbufftimer 0
	/doevents flush WornOff
/return 

|----------------------------------------------------------------------------
|- SUB: Event GroupChange
|----------------------------------------------------------------------------

Sub Event_GroupChange
	/varset fparatimer2 10s
/return 