|- IHCMAG.mac - By IHC385 - Modded by ch0pz
|- Automatic Beastlord bot - 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcmagutil.inc
#include IHCMercs\ihcevents.inc
#warning
#bind SetVarInt		/setvarint
#bind CmdList       /ihchelp
#Event NotOnTarget	"#*#You cannot see your target#*#"
#Event NotOnTarget	"#*#Your target is too far away#*#"
#Event WornOff      "Your #1# spell has worn off of #*#."
#Event GroupChange	"#*#has joined the group#*#"
Sub Main
	/delay ${Math.Rand[10]}
	/doevents flush
	/declare MacroName       	string outer IHCMAG
	/declare MacroPath       	string outer IHCMercs\IHCMAG
	/declare IHCVersion       	string outer 2.11b
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini
	/call MagSetup
	/call VarSetup
	/call AliasSetup
	/call SetSpells
	/call SetControlToon
	/call LoadSpellBar
	/pet hold on
	/call SetPetMode
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${assistid}==${Me.ID}) {
		/echo \aw I am Main Assist
	} else {
		/echo \aw Assisting \ay >> \ag ${assistname} \ay << \aw at \ag ${AutoAssistAt}%
	}
	/if (${UseZoneLogic}) {
		/call ZoneEventChk
	}
 :mainloop
	/if (${changetoini}==1) /call INIChanges
	/if (${Me.Zoning}) /call Zoning
	/if (${Me.Hovering}) /call DeathSub
	/if (${Cursor.ID}) /call BagModRods
	/call IDUpdateCheck
	/if ((${Me.XTarget[1].ID} || (${Group.MainAssist.ID} && ${Group.MainAssist.ID}!=${Me.ID} && ${Target.ID}!=${Me.GroupAssistTarget.ID}) || ${SpawnCount[npc radius ${AssistRange} zradius 15 targetable playerstate 4]} || ${FollowMarkTarget}) && !${BackOffFlag} && ${DoAutoTarget}) /call FindTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<${AssistRange} && (!${Target.Mezzed.ID} || ${AllowMezBreak}) && !${BackOffFlag} && ${DoAutoEngage}) /call EngageTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.ID}==${autotargetid} && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.Distance}<${AssistRange} && ${DoDPS} && (${DPSRecastTimer}==0) && !${BackOffFlag} && ${Ok2Assist}) /call CombatDiscs
	/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${DoBuffs}) /call BuffCheck
	/if ((${Me.PctMana}>=30) && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID}) && (!${Me.Invis}) && !${MoveTo.Moving} && !${AdvPath.Following} && ${Stick.Status.Equal[OFF]} && ${groupbufftimer}==0 && ${DoBuffs}) /call BuffGroup
	/if (${Spawn[=${FollowToonName}].ID} && !${MoveTo.Moving} && ${Stick.Status.Equal[OFF]} && (!${Me.Casting.ID}) && (!${Me.XTarget[1].ID} || ${Spawn[id ${assistid}].Distance}>${AssistRange} || (!${Spawn[id ${assistid}].LineOfSight}))) /call FollowToon
	/if (${Spawn[=${FollowToonName}].ID} && (${Me.Casting.ID} || ${Me.XTarget[1].ID}) && ${AdvPath.Following}) /squelch /afollow off
	/if (!${Me.XTarget[1].ID}&& !${KillTargetID}) /call AutoCampCheck
	/if (${UseModRods}) /call ClickModRoD
	/if (${DoMed} && ${spellrememtimer}==0) /call AutoMed
	/if (${UseZoneLogic} && ${EventSetupFlag}) {
		/call EventLogic${EventSetupFlag}
	}
	/if (((!${Spawn[targetable id ${KillTargetID}].ID}) || ${Spawn[corpse id ${KillTargetID}].ID}) && ${KillTargetID}!=0) {
		/varset KillTargetID 0
		/varset SpawnSearchType npc
		/varset autotargetid 0
	}
	/if (${Me.Pet.Combat} && !${Ok2Assist}) {
		/pet back off
	}
	/if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID} || ${Me.Corrupted.ID} || ${Me.Snared.ID} || ${Me.Mezzed.ID} || ${Me.Charmed.ID}) && ${BegTimer}==0 && ${DoGroupBeg}) /call BegForCure
	/doevents
	/goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: Pet Mode
|---------------------------------------------------------------------------- 
Sub SetPetMode
	/if (${DoPetTank}) {
		/if (${PetTank}==0) /varset PetTank 1
		/pet taunt on
		/echo \aw Pet Tanking is :\ag ON
	} else {
		/pet taunt off
		/if (${PetTank}==1) /varset PetTank 0
		/echo \aw Pet Tanking is :\ar OFF
	}
/return
|----------------------------------------------------------------------------
|- SUB: BuffGroup
|---------------------------------------------------------------------------- 
Sub BuffGroup
	/declare bmember			int local 0
	/if (${groupbufftimer}==0) /varset groupbufftimer 10s
	/for bmember 0 to ${Group}
		/if (${Group.Member[${bmember}].Distance}<100 && !${Group.Member[${bmember}].OtherZone} && (!${Me.Casting.ID}) && ${DanNet.Peers[${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower}]}) {
			/call Gquery ${EverQuest.Server.Lower}_${Group.Member[${bmember}].Name.Lower} "Me.Buff[${DamageShield}].ID" "tmpbuffid" "int"
			/if (!${tmpbuffid} && ${Me.Book[${DamageShield}]} && ${Me.CurrentMana}>${Spell[${DamageShield}].Mana} && (!${Me.Casting.ID}) && !${Select[${Group.Member[${bmember}].Class.ShortName},SHD,PAL,WAR,RNG,BER,ROG,MNK]} && ${UseDmgShield}) {
				/call SpellQueue "${DamageShield}" ${Group.Member[${bmember}].ID}
				/varset spellrememtimer 5s
				/delay 10
			}		
		}
	/next bmember
	|- Delete variable's
	/if (${Defined[tmpbuffid]}) /deletevar tmpbuffid
	/if (${Defined[tmpstackcheck]}) /deletevar tmpstackcheck
	/if (${Group.MainAssist.ID} && ${Target.ID}!=${Group.MainAssist.ID}) {
		/target id ${Group.MainAssist.ID}
		/if (${ReTargetDelay}==0) /varset ReTargetDelay 1m
		/if (${autotargetid}) /varset autotargetid 0
	}
/return
|----------------------------------------------------------------------------
|- SUB: CombatDiscs
|---------------------------------------------------------------------------- 
Sub CombatDiscs
	/doevents
	/call FindTarget
	/if (${Target.CurrentHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${Target.Distance}<=${AssistRange} && ${Ok2Assist}) {
|- Pet Attack
		/if ((!${Me.Pet.Combat} || ${Pet.Target.ID}!=${autotargetid}) && ${Me.Pet.ID} && ${Target.Type.Equal[NPC]} && ${Target.ID} && ${Target.CurrentHPs}<=${AutoAssistAt} && ${UsePet}) {
			/pet attack 
			/pet swarm
		}
	}
|- DPS SPELLS
		/if (${Me.PctMana}>=${Manatonuke}) {
	| SwarmPet
			/if (${UseSwarmpet} && ${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${SwarmPet}].RankName}]} && ${Me.CurrentMana}>${Spell[${SwarmPet}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${SwarmPet}].RankName}" ${autotargetid}
	| DichoSpell
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${DichoSpell}].RankName}]} && ${Me.CurrentMana}>${Spell[${DichoSpell}].Mana} && !${Me.Song[Dichotomic Companion 1].ID} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${DichoSpell}].RankName}" ${autotargetid}
	| Nuke1
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell1}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<90 && ${Me.CurrentMana}>${Spell[${NukeSpell1}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell1}].RankName}" ${autotargetid}
	| Nuke2
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell2}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<88 && ${Me.CurrentMana}>${Spell[${NukeSpell2}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell2}].RankName}" ${autotargetid}
	| Nuke3
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell3}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<86 && ${Me.CurrentMana}>${Spell[${NukeSpell3}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell3}].RankName}" ${autotargetid}
	| Nuke4
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell4}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<85 && ${Me.CurrentMana}>${Spell[${NukeSpell4}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell4}].RankName}" ${autotargetid}
	| Nuke5
			} else /if (${Cast.Status.Equal[I]} && ${Me.SpellReady[${Spell[${NukeSpell5}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<85 && ${Me.CurrentMana}>${Spell[${NukeSpell5}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${NukeSpell5}].RankName}" ${autotargetid}
	| TwinCast
			} else /if (${Cast.Status.Equal[I]} && ${Target.Named} && ${Me.SpellReady[${Spell[${TwinSpell}].RankName}]} && ${Me.PctAggro}<${StopNukeAggro} && ${Target.CurrentHPs}<85 && ${Me.CurrentMana}>${Spell[${TwinSpell}].Mana} && !${Me.Moving} && !${Target.Type.Equal[Corpse]} && ${Target.LineOfSight}) {
				/call SpellQueue "${Spell[${TwinSpell}].RankName}" ${autotargetid}
			}
			/if (${CastResult.Equal[CAST_SUCCESS]} || ${CastResult.Equal[CAST_RESIST]}) /varset DPSRecastTimer 0
		}	
/return
|----------------------------------------------------------------------------
|- SUB: BuffCheck
|----------------------------------------------------------------------------
Sub BuffCheck	
	/if (${UsePet} && !${Me.Pet.ID} && ${Cast.Status.Equal[I]} && ${Me.Book[${PetSpell}]} && ${Me.CurrentMana}>${Spell[${PetSpell}].Mana}) {
		/call SpellQueue "${PetSpell}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Buff[${Spell[${ManaRegenBuff}].RankName}].ID} && (!${Me.Casting.ID}) && ${Me.Book[${ManaRegenBuff}]} && ${Me.CurrentMana}>${Spell[${ManaRegenBuff}].Mana}) {
		/call SpellQueue "${ManaRegenBuff}" ${Me.ID}
		/varset spellrememtimer 5s 
	} else /if (!${Me.Buff[${Spell[${MeleeShield}].RankName}].ID} && (!${Me.Casting.ID}) && ${Me.Book[${MeleeShield}]} && ${Me.CurrentMana}>${Spell[${MeleeShield}].Mana}) {
		/call SpellQueue "${MeleeShield}" ${Me.ID}
		/varset spellrememtimer 5s 
	} else /if (!${Me.Buff[${Spell[${ShieldSpell}].RankName}].ID} && (!${Me.Casting.ID}) && ${Me.Book[${ShieldSpell}]} && ${Me.CurrentMana}>${Spell[${ShieldSpell}].Mana} && ${UseShield}) {
		/call SpellQueue "${ShieldSpell}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (${UsePet} && !${DoPetTank} && !${Me.Pet.Buff[${PetOffenseBuff}]} &&  ${Spell[${PetOffenseBuff}].StacksPet} && (!${Me.Casting.ID}) && ${Me.Book[${PetOffenseBuff}]} && ${Me.CurrentMana}>${Spell[${PetOffenseBuff}].Mana}) {
		/call SpellQueue "${PetOffenseBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (${UsePet} && ${DoPetTank} && !${Me.Pet.Buff[${PetDefenseBuff}]} &&  ${Spell[${PetDefenseBuff}].StacksPet} && (!${Me.Casting.ID}) && ${Me.Book[${PetDefenseBuff}]} && ${Me.CurrentMana}>${Spell[${PetDefenseBuff}].Mana}) {
		/call SpellQueue "${PetDefenseBuff}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (${UsePet} && !${Me.Pet.Buff[${PetHaste}]} &&  ${Spell[${PetHaste}].StacksPet} && (!${Me.Casting.ID}) && ${Me.Book[${PetHaste}]} && ${Me.CurrentMana}>${Spell[${PetHaste}].Mana}) {
		/call SpellQueue "${PetHaste}" ${Me.ID}
		/varset spellrememtimer 5s
	} else /if (!${Me.Gem[${spellmisc}].Name.Equal[${miscspellremem}]} && ${spellrememtimer}==0 && ${miscspellremem.NotEqual[NULL]}) {
		/call LoadSpellGem "${miscspellremem}" ${spellmisc}
	}
	/if (${Group.MainAssist.ID} && ${ReTargetDelay}==0 && ${Target.ID}!=${Group.MainAssist.ID}) {
		/target id ${Group.MainAssist.ID}
		/varset ReTargetDelay 1m
		/varset autotargetid 0
	}
/return	
|----------------------------------------------------------------------------
|- SUB: Event_WornOff
|----------------------------------------------------------------------------
Sub Event_WornOff
	/varset groupbufftimer 0
	/doevents flush WornOff
/return 
|----------------------------------------------------------------------------
|- SUB: Event GroupChange
|----------------------------------------------------------------------------
Sub Event_GroupChange
	/varset fparatimer2 10s
/return


| ----------------------------------------------------------------------------
| SUB: Check PetToys - Based on code from el_nene's autobot. Used with permission.
| Autobot is available at www.Macroquest2.com VIP macro section.
| Updated and Revised for KissAssist
| ----------------------------------------------------------------------------
    Sub PetToys(string petName)
        /if (!${Me.Pet.ID}) /return w
        | DEBUGPET PetToys Enter
        /declare i            int    local
        /declare j            int    local
        /declare GrabItem     int    local 0
        /declare PetToySpell  string local 0
        /declare FullText     string local
        /declare 2ndPart      string local
        /declare 3rdPart      string local
        | /declare PetToysTemp  string local ${Ini[${IniFileName},Pet,PetToysGave]}
        /declare GaveItem     int    local 1
        /declare CondNo       int    local 0
        /call OpenInvSlot
        /declare petID int local ${Spawn[pet ${petName}].ID}
        /if (!${Defined[PetToysOn]}) /return
        /if (!${PetToysOn}) /return 0
        /if (${BagNum}==0) {
            /echo You must have an empty Top Inventory slot for Pet Toys to work.
            /varset PetToysOn 0
            /return X
        }
        /if (!${InvSlot[pack${BagNum}].Item.Container} && !${Me.FreeInventory}) {
            /echo Inventory is full
            /varset PetToysOn 0
            /return X
        }
        | reset if different pet name only on my pet
        /if (!${PetToysTemp.Find[${petName}]} && ${Me.Pet.CleanName.Equal[${petName}]}) {
            /ini "${IniFileName}" "Pet" "PetToysGave" "0"
            |/varset PetToysTemp ${Ini[${IniFileName},Pet,PetToysGave]}
            /varset PetToysTemp 0
        }
        /for i 1 to ${PetToys.Size}
            |/if (!${PetToysOn}) /return 0
            | DEBUGPET CHECKING: ${PetToys[${i}]}
            /if (${ConOn} && ${PetToys[${i}].Find[|cond]}) {
                /varset CondNo ${PetToys[${i}].Mid[${Math.Calc[${PetToys[${i}].Find[|cond]}+5]},3]}
            } else {
                /varset CondNo 0
            }
            
            | /if (${DebugPet}) {
                | /echo \atDEBUGPET PetToys 1: ${PetToys[${i}]}
                | /echo \atDEBUGPET PetToys 2: ${PetToysTemp}
                | /echo \atDEBUGPET PetToys 3: ${PetToys[${i}].Equal[Null]} || ${PetToysTemp.Find[${petName}]} && ${PetToysTemp.Find[${PetToys[${i}]}]}
                | /echo \atDEBUGPET PetToys 4: ${If[CondNo,${cond[${CondNo}]},0]}
            | }
            /if (${CondNo}) {
                /if (${If[${Cond[${CondNo}]},0,1]}) /continue
            }
            | Had to add pet name check else it will always skip giving weapons to OTHER pets.
            | DEBUGPET PetToys ${PetToys[${i}].Equal[Null]} || (${Me.Pet.CleanName.Equal[${petName}]} && ${PetToysTemp.Find[${petName}]} && ${PetToysTemp.Find[${PetToys[${i}]}]}) SkipPetToy 1
            /if (${PetToys[${i}].Equal[Null]} || (${Me.Pet.CleanName.Equal[${petName}]} && ${PetToysTemp.Find[${petName}]} && ${PetToysTemp.Find[${PetToys[${i}]}]})) /continue
            | Are we handing weapons to the pet
            /if (${PetToys[${i}].Arg[2,|].Length} && ${PetToys[${i}].Arg[2,|].NotEqual[null]}) {
                /varset FullText ${PetToys[${i}]}
                /varset PetToySpell ${PetToys[${i}].Arg[1,|]}
                /varset 2ndPart ${PetToys[${i}].Arg[2,|]}
                /varset 3rdPart ${PetToys[${i}].Arg[3,|]}
            } else {
                /varset FullText
                /varset PetToySpell ${PetToys[${i}]}
                /varset 2ndPart
                /varset 3rdPart
            }
            | DEBUGPET PetToys ${Me.Pet.CleanName.Equal[${petName}]} && ${2ndPart.Length} && ${PetToysTemp.Find[1]} && ${PetToysTemp.Find[2]} SkipPetToy 2
            /if (${Me.Pet.CleanName.Equal[${petName}]} && ${2ndPart.Length} && ${PetToysTemp.Find[1]} && ${PetToysTemp.Find[2]}) /continue
            | Check if spell level less than 76 because mage pets auto equipped after that.
            /if (${Me.Pet.CleanName.Equal[${petName}]} && ${Spell[${PetToySpell}].Level}>=76 && (${PetToySpell.Find[muzzle]} || ${PetToySpell.Find[visor]} || ${PetToySpell.Find[belt]})) /continue
            | Check for pet toy spells in book to prevent double casting of items
            /if (${Me.Book[${PetToySpell}]}) {
                /call CastWhat "${PetToySpell}" ${Me.ID} Pet-nomem 0
                /if (!${PetToysTemp.Find[${petName}]} && ${Me.Pet.CleanName.Equal[${petName}]}) {
                    /ini "${IniFileName}" "Pet" "PetToysGave" "${petName}"
                    /varset PetToysTemp ${Ini[${IniFileName},Pet,PetToysGave]}
                }
                /if (${Macro.Return.Equal[CAST_SUCCESS]}) {
                    /echo Casting pet toy spell >> ${PetToySpell} <<
                }

                /delay 15s ${Cursor.ID}
                /if (!${Cursor.ID}) /return 0
                | Check if spell has summoned a bag or folded pack
                /if (${Cursor.Container} || ${Cursor.Name.Find[Folded]}) {
                    | If item is in Inv Slot exchange it with bag on cursor
                    /if (${InvSlot[pack${i}].Item.ID}) /nomodkey /itemnotify pack${BagNum} leftmouseup
                    /while (1) {
                        /delay 2s ${Cursor.ID}
                        | Drop bag or item into inventory
                        /autoinventory
                        /delay 1s
                        | Drop exchanged item into inventory after bag is dropped
                        /if (${Cursor.ID}) /autoinventory
                        | If folded pack right click to convert to phantom satchel
                        /if (${InvSlot[pack${BagNum}].Item.Name.Find[folded]}) {
                            /nomodkey /itemnotify pack${BagNum} rightmouseup
                            /echo Opening ${InvSlot[pack${BagNum}].Item.Name}
                            /delay 3s
                        } else {
                            /break
                        }
                    }
                }
                /if (${InvSlot[pack${BagNum}].Item.Container} && (${InvSlot[pack${BagNum}].Item.Name.Find[Phantom Satchel]} || ${InvSlot[pack${BagNum}].Item.Name.Find[Pouch of Quellious]})) {
                    | Open the bag
                    /nomodkey /itemnotify pack${BagNum} rightmouseup
                    /delay 10
                    | DEBUGPET PetToys ${i} ${PetToySpell} ${2ndPart} ${3rdPart}
                    | Condition revised to allow for pet weapons to be given to other people's pets.
                    /if (((${Me.Pet.CleanName.Equal[${petName}]} && !${PetToysTemp.Find[${2ndPart}1]}) && ${2ndPart.Length} && ${FindItemCount[=${2ndPart}]}) || (!${Me.Pet.CleanName.Equal[${petName}]} && ${2ndPart.Length} && ${FindItemCount[=${2ndPart}]})) {
                        /call GiveTo "${2ndPart}" ${petID}
                        /varset PetToysTemp ${PetToysTemp}|${PetToySpell}:${2ndPart}1
                        /if (${Me.Pet.CleanName.Equal[${petName}]}) /ini "${IniFileName}" "Pet" "PetToysGave" "${PetToysTemp}"
                    }
                    | Condition revised to allow for pet weapons to be given to other people's pets.
                    /if (((${Me.Pet.CleanName.Equal[${petName}]} && !${PetToysTemp.Find[${3rdPart}2]}) && ${3rdPart.Length} && ${FindItemCount[=${3rdPart}]}) || (!${Me.Pet.CleanName.Equal[${petName}]} && ${3rdPart.Length} && ${FindItemCount[=${3rdPart}]})) {
                        /call GiveTo "${3rdPart}" ${petID}
                        /varset PetToysTemp ${PetToysTemp}|${PetToySpell}:${3rdPart}2
                        /if (${Me.Pet.CleanName.Equal[${petName}]}) /ini "${IniFileName}" "Pet" "PetToysGave" "${PetToysTemp}"
                    }
                    /if (!${2ndPart.Length}) {
                        /for j 0 to ${InvSlot[pack${BagNum}].Item.Container}
                            /if (${InvSlot[pack${BagNum}].Item.Item[${j}].ID} && ${InvSlot[pack${BagNum}].Item.Item[${j}].Name.Length}) {
                                /call GiveTo "${InvSlot[pack${BagNum}].Item.Item[${j}].Name}" ${petID}
                            }
                            /delay 10
                        /next j
                        /if (${j}>=8 && !${PetToysTemp.Find[${PetToySpell}]} && ${Me.Pet.CleanName.Equal[${petName}]}) {
                            /varset PetToysTemp ${PetToysTemp}|${PetToySpell}
                            /ini "${IniFileName}" "Pet" "PetToysGave" "${PetToysTemp}"
                        }
                    }
                }
                /if (${Cursor.Name.Find[Summoned:]}) {
                    /if (${2ndPart.Length} && !${PetToysTemp.Find[1]}) {
                        /varset PetToysTemp ${PetToysTemp}|${PetToySpell}:${2ndPart}1
                    } else /if (${2ndPart.Length} && ${PetToysTemp.Find[1]} ) {
                        /varset PetToysTemp ${PetToysTemp}|${PetToySpell}:${2ndPart}2
                    } else /if (!${2ndPart.Length} && !${PetToysTemp.Find[${PetToySpell}]}) {
                        /varset PetToysTemp ${PetToysTemp}|${PetToySpell}:${Cursor.Name}
                    }
                    /call GiveTo "${Cursor.Name}" ${petID}
                    /if (${Me.Pet.CleanName.Equal[${petName}]}) /ini "${IniFileName}" "Pet" "PetToysGave" "${PetToysTemp}"
                    /varset GaveItem 0
                }
                /if (${InvSlot[pack${BagNum}].Item.Name.Find[Phantom Satchel]} || ${InvSlot[pack${BagNum}].Item.Name.Find[Pouch of Quellious]}) /call DestroyBag
            }
        /next i
        | MUST reset PetToysGave after cycle complete in order to stop calling PetToys all the time.
        /varset PetToysGave ${PetToysTemp}
        /if (${Window[InventoryWindow].Open} && !${GaveItem}) /keypress inventory
        /varset PetToysDone 1
        | DEBUGPET PetToys Leave
    /return
| ----------------------------------------------------------------------------
| SUB: Check OpenInvSlot - Based on code from el_nene's autobot. Used with permission.
| Autobot is available at www.Macroquest2.com VIP macro section.
| Updated and Revised for KissAssist
| ----------------------------------------------------------------------------
    Sub OpenInvSlot
        | DEBUGBUFF OpenInvSlot Enter
        /if (${BagNum}) /return
        /declare i int local
        /varset BagNum 0
        /for i 1 to 10
            /if (${InvSlot[pack${i}].Item.Container}) /continue
            /if (!${InvSlot[pack${i}].Item.Container} || ${InvSlot[pack${i}].Item.ID}==0) {
                | Must have at least 2 inv slots open in order to swap bags and items
                /if (${Me.FreeInventory}>=2) /varset BagNum ${i}
            }
            /if (${BagNum}) {
                /echo Pet Toys: Inventory slot ${i} is empty using that one.
                /delay .5
                /return
            }
        /next i
        | DEBUGBUFF OpenInvSlot Leave
    /return
| ----------------------------------------------------------------------------
| SUB: Check DestroyBag - Based on code from el_nene's autobot. Used with permission.
| Autobot is available at www.Macroquest2.com VIP macro section.
| Updated and Revised for KissAssist
| ----------------------------------------------------------------------------
    Sub DestroyBag
        | DEBUGBUFF DestroyBag Enter
        /declare j int local
        | Make sure bag has no items other than summoned in it before deleting.
        /if (${InvSlot[pack${BagNum}].Item.Items}) {
            /for j 0 to ${InvSlot[pack${BagNum}].Item.Container}
                /if (!${InvSlot[pack${BagNum}].Item.Item[${j}].NoRent} && ${InvSlot[pack${BagNum}].Item.Item[${j}].Name.Length}) {
                    /echo Bag has non summoned item(s) in it. Aborting delete. Pet Toys Off
                    /varset PetToysOn 0
                    /return
                }
            /next j
        }
        /if (${InvSlot[pack${BagNum}].Item.Name.Find[Phantom Satchel]} || ${InvSlot[pack${BagNum}].Item.Name.Find[Pouch of Quellious]}) {
            /nomodkey /itemnotify pack${BagNum} leftmouseup
            /delay 5s ${Cursor.ID}
            /if (${Cursor.Name.Find[Phantom Satchel]} || ${Cursor.Name.Find[Pouch of Quellious]}) /destroy
            /delay 20 !${Cursor.ID}
        }
        | DEBUGBUFF Leave
    /return
| ----------------------------------------------------------------------------
| SUB: Check GiveTo - Based on code from el_nene's autobot. Used with permission.
| Autobot is available at www.Macroquest2.com VIP macro section.
| Updated and Revised for KissAssist
| ----------------------------------------------------------------------------
    Sub GiveTo(string GItem, int GTarget)
        | DEBUGBUFF GiveTo Enter
        /declare ItemSummoned int local 0
        /if (${Target.ID}!=${GTarget}) {
            /target id ${GTarget}
            /delay 2s ${Target.ID}==${GTarget}
        }
        /if (${Target.Distance}>5 && ${Target.Distance}<=${CampRadius}) {
            /moveto id ${Target.ID} mdist 5
            /delay 50 ${MoveTo.Stopped}
        }
        /if (${Me.Mount.ID}) /dismount
        /if (${Me.Levitating}) /removelev
        /if (!${Cursor.ID} && ${FindItemCount[=${GItem}]}>0) {
            /shift /itemnotify "${GItem}" leftmouseup
            /delay 20 ${Cursor.ID}
        }
        /while (${Cursor.ID} && ${Cursor.NoRent}) {
            /if (${Cursor.ID}==${FindItem[=${GItem}].ID}) {
                /varset ItemSummoned 1
                /nomodkey /click left target
            }
            /delay 10
        }
        /delay 30 ${Window[GiveWnd].Open}
        /if (${ItemSummoned} && ${Window[GiveWnd].Open}) {
            /notify GiveWnd GVW_Give_Button leftmouseup
            /echo Giving ${GItem} to ${Target.CleanName}
        } else {
            /echo Item is NOT SUMMONED canceling trade
            /notify GiveWnd GVW_Cancel_Button leftmouseup
        }
        /delay 15
        | New pet patch gives back item if pet has equipped. Delete item from cursor.
        /if (${Cursor.ID} && (${Cursor.NoRent} || ${Cursor.Name.Find[muzzle]} || ${Cursor.Name.Find[visor]} || ${Cursor.Name.Find[belt]}) && ${Cursor.ID}==${FindItem[=${GItem}].ID}) {
            /while (${Cursor.ID}) {
                /destroy
                /delay 10
            }
        }
        /delay 200 !${Window[GiveWnd].Open}
        | DEBUGBUFF GiveTo Leave
    /return **| 