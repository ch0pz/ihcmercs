|- IHCWAR.mac - By IHC385
|- Automatic Warrior bot - 
|- Version 2.0
|- Updated: 4/25/2019
|- Credit: Toots, Noobhax0r, Maskoi, Ctaylor, Treehuggindruid. A lot of ideas were borrowed and modified from their macros
#Chat group
#Chat tell
#Chat raid
#turbo 80
#include IHCMercs\ihcsubs.inc
#include IHCMercs\ihcwarutil.inc
#include IHCMercs\ihcevents.inc
#warning
#bind SetVarInt		/setvarint
#bind CmdList       /ihchelp
#bind DefenseDisc    /defdisc
#bind FortitudeDisc  /evadedisc
#Event NotOnTarget	"#*#You cannot see your target#*#"
#Event NotOnTarget	"#*#Your target is too far away#*#"
#Event Iamsnared	"#*#You are entangled by webs#*#"
#Event Buff 			"Your #1# spell has worn off of #*#."
|- #Event TargetCasting	"#*#${Target.CleanName} begins to cast a spell.#*#"

Sub Main
	/delay ${Math.Rand[10]}
	/doevents flush
	/declare MacroName       	string outer IHCWAR
	/declare MacroPath       	string outer IHCMercs\IHCWAR
	/declare IHCVersion       	string outer 2.0 
	/declare IniFileName     	string outer ${MacroPath}_${EverQuest.Server}_${Me.CleanName}.ini

	/call WarSetup	
	/call VarSetup
	/call AliasSetup
	/call CheckOptions
	/call SetupDiscs
	/call SetControlToon
|-Cursor ID
	/if (${Cursor.ID}) {
		/echo Sending Item on Cursor to Bag
		/autoinventory
	}
	/call WelcomeMsg
	/if (${assistid}==${Me.ID}) {
		/echo \aw I am Main Assist
	} else {
		/echo \aw Assisting \ay >> \ag ${assistname} \ay << \aw at \ag ${AutoAssistAt}%
	}

	/if (${UseZoneLogic}) {
		/call ZoneEventChk
	}
 :mainloop
	/if (${Me.Zoning}) /call Zoning
  	/if (${changetoini}==1) /call INIChanges
	/if (${Me.Hovering}) /call DeathSub
	/if (${Cursor.ID} && ${DoAutoBag}) /call BagModRods
	/call IDUpdateCheck
	/if (!${Me.Combat} && (${Me.XTarget[1].ID} || ${FollowMarkTarget}) && ${DoAutoTarget} && !${BackOffFlag} ) /call FindTarget
	/if ((${Target.ID}!=${autotargetid} || !${Target.ID}) && ${Me.XTarget[1].ID} && ${DoAutoTarget} && !${BackOffFlag}) /call FindTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && ${Target.Distance}<${AssistRange} && ${Target.PctHPs}<=${AutoAssistAt} && ${Target.ID}==${autotargetid} && ${DoAutoEngage} && !${BackOffFlag}) /call EngageTarget
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && !${BackOffFlag}) /call CheckAggro
	/if ((${Me.XTarget[1].ID} || ${KillTargetID}) && !${BackOffFlag}) /call DoCombat
	/if (!${Me.Combat} && !${Me.XTarget[1].ID} && ${DoBuffs} && !${KillTargetID}) /call DowntimeDiscs
	/if (${Spawn[${FollowToonName}].ID} && !${MoveTo.Moving} && ${Stick.Status.Equal[OFF]}) /call FollowToon
	/if (!${Me.XTarget[1].ID} && !${KillTargetID}) /call AutoCampCheck
	/if (${DoMed}) /call AutoMed
	/if (${UseZoneLogic} && ${EventSetupFlag}) {
		/call EventLogic${EventSetupFlag}
	}
	/if (((!${Spawn[targetable id ${KillTargetID}].ID}) || ${Spawn[corpse id ${KillTargetID}].ID}) && ${KillTargetID}!=0) {
		/varset KillTargetID 0
		/varset SpawnSearchType npc
		/varset autotargetid 0
	}
	/if ((${Me.Poisoned.ID} || ${Me.Diseased.ID} || ${Me.Cursed.ID} || ${Me.Corrupted.ID} || ${Me.Snared.ID} || ${Me.Mezzed.ID} || ${Me.Charmed.ID} || ${Me.Buff[Drachnid Entangle].ID}) && ${BegTimer}==0 && ${DoGroupBeg}) /call BegForCure
	/doevents
 /goto :mainloop
/return
|----------------------------------------------------------------------------
|- SUB: DoCombat
|---------------------------------------------------------------------------- 
Sub DoCombat
	|-/if (!${Select[${Me.Animation},5,6]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) /squelch /attack on
	/if (${Target.ID} && ${Me.XTarget[1].ID} && ${Target.Distance}<=${Target.MaxRangeTo} && !${Me.Combat}) /squelch /attack on
	/if (${Me.AbilityReady[Bash]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat} && ${Me.Inventory[14].Type.Equal[Shield]}) {
		/call AbilityNow "Bash"
	}
	/if (${Me.AbilityReady[Kick]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
			/call AbilityNow "Kick"
	} else /if (${Me.AltAbilityReady[Knee Strike]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
			/call AANow ${Me.AltAbility[Knee Strike].ID}
	} else /if (${Me.AltAbilityReady[Gut Punch]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
			/call AANow ${Me.AltAbility[Gut Punch].ID}
	} else /if (${Me.AltAbilityReady[Call of Challenge]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
			/call AANow ${Me.AltAbility[Call of Challenge].ID}
	} else /if (${Me.AbilityReady[Disarm]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Me.Combat}) {
			/call AbilityNow "Disarm"
	}
	/if (${Me.CombatAbilityReady[${StrikeDisc}]} && ${Target.Distance}<=${Target.MaxRangeTo} && ${Target.PctHPs}<=20 && ${Me.Combat}) {
		/call DiscNow "${StrikeDisc}"
	}
/return
|----------------------------------------------------------------------------
|- SUB: CheckAggro
|---------------------------------------------------------------------------- 
Sub CheckAggro
	/declare i int local 1
	/declare j int local 1 
	/declare badaggro int local 0
	/declare badaggroid int local 0
	/declare namecheckid int local 0 
	/declare lowhptarget int local 100
	/declare lowhpid int local 0
	/if (${Me.PctEndurance}>20 && ${Me.CombatAbilityReady[${groupac}]} && !${Me.Song[Field].ID} && ${DoBuffs}) {
		/call DiscNow "${groupac}"
	} else /if (${Me.PctEndurance}>20 && ${Me.CombatAbilityReady[${groupdodge}]} && !${Me.Song[Commanding Voice].ID} && ${DoBuffs}) {
		/call DiscNow "${groupdodge}"
	} else /if (!${Me.ActiveDisc.ID} && ${Me.CombatAbilityReady[${defenseac}]} && ${DoBuffs} && !${DoDefense}) {
		/call DiscQueue "${defenseac}"
	} else /if (!${Me.Buff[Brace for Impact].ID} && ${Me.AltAbilityReady[Brace for Impact]} && ${DoBuffs} && !${DoDefense}) {
		/call AANow ${Me.AltAbility[Brace for Impact].ID}
	} else /if (!${Me.Song[Blade Guardian].ID} && ${Me.AltAbilityReady[Blade Guardian]} && ${DoBuffs} && !${DoDefense}) {
		/call AANow ${Me.AltAbility[Blade Guardian].ID}
	}
	|--DoAutoPDH - Rotates > Pain Does't Hurt / OoW BP / Diplomatic Papers to always keep a dmg reduction buff running
	/if (${DoAutoPDH}) {
		/if (${Me.CombatAbilityReady[${absorball}]} && !${Me.Buff[Guardian's Bravery].ID} && !${Me.Buff[Diplomatic Immunity].ID}) {
			/call DiscNow "${absorball}"
		} else /if (${FindItem[${ItemOoWBP}].ID} && ${FindItem[${ItemOoWBP}].Timer}==0 && !${Me.Song[Pain Doesn't Hurt].ID} && !${Me.Buff[Diplomatic Immunity].ID}) {
			/call ItemNow "${ItemOoWBP}"
		} else /if (${FindItem[${ItemDipPapers}].ID} && ${FindItem[${ItemDipPapers}].Timer}==0 && !${Me.Song[Pain Doesn't Hurt].ID} && !${Me.Buff[Guardian's Bravery].ID}) {
			/call ItemNow "${ItemDipPapers}"
		}
	}
	|--XTarget Checks
	/for i 1 to ${Me.XTarget}
	|--XTarget Aggro Check
		/if (${Me.XTarget[${i}].PctAggro}<100 || ${Me.XTarget[${i}].PctAggro}>100) {
			/varcalc badaggro ${badaggro}+1
			/varset badaggroid ${Me.XTarget[${i}].ID}
		}
	|--XTarget Low HP Check
		/if (${Me.XTarget[${i}].PctHPs}<${lowhptarget} && ${Me.XTarget[${i}].Distance}<${AssistRange}) {
			/varset lowhptarget ${Me.XTarget[${i}].PctHPs}
			/varset lowhpid ${Me.XTarget[${i}].ID}
			}
	|--XTarget Named Check
		/if (${Me.XTarget[${i}].Named} && ${Me.XTarget[${i}].Type.Equal[NPC]} && ${Me.XTarget[${i}].Distance}<${AssistRange}) /varset namecheckid ${Me.XTarget[${i}].ID}
	/next i
	/if (${DoAutoTarget}) {
		/if (${badaggro}>0 && ${stayontarget}!=1) {
			/varset autotargetid ${badaggroid}
			/if (${Target.ID}!=${autotargetid} && ${Spawn[id ${autotargetid} npc radius ${AssistRange}].ID}) /target id ${autotargetid}
			/delay 5 ${Target.ID}==${autotargetid}
		} else /if (${badaggro}==0 && ${Spawn[id ${namecheckid} npc radius ${AssistRange}].ID} && ${namecheckid}!=${Target.ID} && !${Target.Named} && ${namecheckid}==${lowhpid}) {
			/varset autotargetid ${Spawn[id ${namecheckid} npc radius ${AssistRange}].ID}
			/if (${Target.ID}!=${autotargetid} && ${Spawn[id ${namecheckid} npc radius ${AssistRange}].ID}) /target id ${autotargetid}
			/delay 5 ${Target.ID}==${autotargetid}
		} else /if (${Target.ID}!=${Me.GroupAssistTarget.ID} && ${Spawn[id ${Me.GroupAssistTarget.ID} npc radius ${AssistRange}].ID}) {
			/varset autotargetid ${Me.GroupAssistTarget.ID}
			/if (${Target.ID}!=${autotargetid} && ${Spawn[id ${autotargetid} npc radius ${AssistRange}].ID}) /target id ${autotargetid}
			/delay 5 ${Target.ID}==${autotargetid}
		} else {
			/call FindTarget
		}
	}
	|--Defensive setup
	/if (${Target.ID} && ${Target.ID}==${Spawn[=Anashti Sul, Damsel of Decay].ID} && ${Me.CombatAbilityReady[${missall}]} && ${Target.PctHPs}<=36) /call DiscQueue "${missall}"
	/if (${DoDefense}) {
		/if ((${SpawnCount[NPC radius 60 zradius 50]}>2 || ${Target.Named}) && ${Me.CombatAbilityReady[${meleemit}]} && (${Me.ActiveDisc.Name.Find[Defense]} || !${Me.ActiveDisc.ID})) {
			/call DiscQueue "${meleemit}"
		} else /if (${Me.PctHPs}<30 && ${Me.CombatAbilityReady[${absorball}]}) {
			/call DiscNow "${absorball}"
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>2 || ${Target.Named}) && ${Me.CombatAbilityReady[${parryall}]} && (${Me.ActiveDisc.Name.Find[Defense]} || !${Me.ActiveDisc.ID})) {
			/call DiscQueue "${parryall}"
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>3 || ${Target.Named}) && ${Me.CombatAbilityReady[${missall}]} && (${Me.ActiveDisc.Name.Find[Defense]} || !${Me.ActiveDisc.ID})) {
			/call DiscQueue "${missall}"
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>2 || ${Target.Named}) && ${Me.CombatAbilityReady[${bmdisc}]} && ${Me.PctEndurance}>20) {
			/docommand /disc 49000
			/delay 8 !${Me.CombatAbilityReady[${bmdisc}]}
			/echo Casting ${bmdisc}
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>2 || ${Target.Named}) && !${Me.Buff[Brace for Impact].ID} && ${Me.AltAbilityReady[Brace for Impact]}) {
			/call AANow ${Me.AltAbility[Brace for Impact].ID}
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>2 || ${Target.Named}) && !${Me.Buff[Brace for Impact].ID} && ${Me.AltAbilityReady[Warlord's Tenacity]}) {
			/call AANow ${Me.AltAbility[Warlord's Tenacity].ID}
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>1 || ${Target.Named}) && !${Me.Buff[Warlord's Tenacity].ID} && ${Me.AltAbilityReady[Imperator's Command]}) {
			/call AANow ${Me.AltAbility[Imperator's Command].ID}
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>1 || ${Target.Named}) && ${Me.CombatAbilityReady[${aehealhate}]} && !${Me.Buff[${aehealhate}].ID} && !${Me.Buff[${aeselfbuff}].ID} && ${Me.PctEndurance}>10) {
			/call DiscNow "${aehealhate}"
		} else /if ((${SpawnCount[NPC radius 60 zradius 50]}>1 || ${Target.Named}) && ${Me.CombatAbilityReady[${aeselfbuff}]} && !${Me.Buff[${aehealhate}].ID} && !${Me.Buff[${aeselfbuff}].ID} && ${Me.PctEndurance}>10) {
			/call DiscNow "${aeselfbuff}"
		} else /if (!${Me.ActiveDisc.ID} && ${Me.CombatAbilityReady[${defenseac}]} && ${SpawnCount[NPC radius 60 zradius 50]}>=1) {
			/call DiscQueue "${defenseac}"
		}
	}
	|--Aggro management
	/if (${DoAggro}) {
		/if (${SpawnCount[NPC radius 60 zradius 50]}>1 && ${badaggro}>0 && ${Me.CombatAbilityReady[${aeroar}]} && ${DoAEAggro}) {
			/call DiscNow "${aeroar}"
		} else /if (${SpawnCount[NPC radius 60 zradius 50]}>1 && ${badaggro}>0 && ${Me.CombatAbilityReady[${aehitall}]} && ${DoAEAggro}) {
			/call DiscNow "${aehitall}"
		} else /if (${SpawnCount[NPC radius 60 zradius 50]}>1 && ${badaggro}>0 && ${Me.AltAbilityReady[Area Taunt]} && ${DoAEAggro}) {
			/call AANow ${Me.AltAbility[Area Taunt].ID}
		} else /if (${Me.AbilityReady[Taunt]} && ${badaggro}>0 && ${Target.Distance}<30) {
			/call AbilityNow "Taunt"
		} else /if (${Me.CombatAbilityReady[${Taunt1}]} && ${badaggro}>0 && ${Target.Distance}<30) {
			/call DiscNow "${Taunt1}"
		} else /if (${Me.AltAbilityReady[Blast of Anger]} && ${Me.SecondaryPctAggro}>70 && ${Target.Distance}<80) {
			/call AANow ${Me.AltAbility[Blast of Anger].ID}
		} else /if (${Me.CombatAbilityReady[${AddHate1}]} && ${Me.SecondaryPctAggro}>70 && ${Me.Endurance}>500 && ${Target.Distance}<${Spell[${AddHate1}].Range}) {
			/call DiscNow "${AddHate1}"
		} else /if (${Me.CombatAbilityReady[${AddHate2}]} && ${Me.SecondaryPctAggro}>70 && ${Me.Endurance}>500 && ${Target.Distance}<${Spell[${AddHate2}].Range}) {
			/call DiscNow "${AddHate2}"
		}
		
		/if (${UseAEHateBuff} && !${Me.Buff[${aehealhate}].ID} && ${Me.CombatAbilityReady[${aehealhate}]} && !${Me.Buff[${singlehealhate}].ID}) {
			/call DiscNow "${aehealhate}"
		} else /if (!${Me.Buff[${aehealhate}].ID} && ${Me.CombatAbilityReady[${singlehealhate}]} && !${Me.Buff[${singlehealhate}].ID}) {
			/call DiscNow "${singlehealhate}"
		}
	}
	|--Reaction Discs	
	/if (${Me.CombatAbilityReady[${shieldhit}]} && !${Target.Buff[Sarnak Finesse].ID} && ${Me.Endurance}>500 && ${Target.MaxRangeTo}>=${Target.Distance}) {
		/call DiscNow "${shieldhit}"
	} else /if (${Me.AltAbilityReady[Battle Leap]} && !${Me.Song[Battle Leap].ID} && !${Me.Song[Group Bestial Alignment].ID} && ${Target.MaxRangeTo}>=${Target.Distance} && ${DoBuffs} && ${DoBattleLeap}) {
		/call AANow ${Me.AltAbility[Battle Leap].ID}
		/squelch /attack on
	}
/return
|----------------------------------------------------------------------------
|- SUB: DowntimeDiscs
|---------------------------------------------------------------------------- 
Sub DowntimeDiscs
|-Out of Combat
	/if (${Me.PctEndurance}<21 && ${Me.Endurance}>313 && ${Me.CombatAbilityReady[${endregen}]} && !${Me.CombatState.Equal[combat]} && !${Me.Invis}) {
		/call DiscQueue "${endregen}"
	} else /if (!${Spell[${Me.Aura[1]}].ID} && !${Me.Moving} && !${Me.Invis} && ${Me.State.NotEqual[FEIGN]} && ${Me.CombatAbility[${Spell[${waraura}].RankName}]} && ${Me.PctEndurance}>10) {
		/call DiscNow "${waraura}"
	}
/return 
|----------------------------------------------------------------------------
|- SUB: Event NotOnTarget - For dealing with too far away and cannot see messages
|----------------------------------------------------------------------------
Sub Event_NotOnTarget
	/if (${DoAutoEngage}) {
		/squelch /attack off
		/if (${DoAutoTarget}) /call FindTarget
		/delay 5
		/if (${Target.Distance}<${AssistRange}) /call EngageTarget
	}
	/doevents flush NotOnTarget
/return
|----------------------------------------------------------------------------
|- SUB: Event Iamsnared
|----------------------------------------------------------------------------
Sub Event_Iamsnared 
	/if (${DoGroupBeg}) {
	 /call BegForCure	
	}
	/doevents flush NotOnTarget
/return



|----------------------------------------------------------------------------
|- SUB: puller_check_group_resources
|----------------------------------------------------------------------------
Sub puller_check_group_resources
    /declare _count int local 0

    /if (${Me.XTarget[1].ID}) /return
    /if (!(${Group.Puller.ID} == ${Me.ID})) /return
    /if (${Limit} == 50 && ${ResourceChecker} == 0) /varset Limit 85
    /if (${Limit} == 85 && ${ResourceChecker} == 1) /varset Limit 50

    /varset ResourceChecker 1

    /for _count 0 to ${Group}
        /if (${Group.Member[${_count}].Distance} < 100 && !${Group.Member[${_count}].OtherZone}) {
            /if (${Select[${Group.Member[${_count}].Class.ShortName},CLR,SHM,NEC,ENC,WIZ,MAG,DRU,SHD,PAL,BST]}) {
                /call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.PctMana" "ResPct" "int"
            } else /if (${Select[${Group.Member[${_count}].Class.ShortName},WAR,ROG,BER,MNK]}) {
                /call Gquery ${EverQuest.Server.Lower}_${Group.Member[${_count}].Name.Lower} "Me.PctEndurance" "ResPct" "int"
            }
            /if (${ResPct} < ${Limit}) {
                /varset ResourceChecker 0
                /delay 5
            }
            /if (${ResourceChecker} == 0) /return
        }
    /next _count
/return
|----------------------------------------------------------------------------
|- SUB: Pull
|----------------------------------------------------------------------------
Sub pull
    /declare PullTargetID   int local 0

    /if (${Me.XTarget}) /return
    /if (${Me.Casting.ID}) /return
    /if (!(${Group.Puller.ID} == ${Me.ID})) /return
    /if (!${Navigation.MeshLoaded}) /return
    /if (${ResourceChecker} == 0) /return
    /if (${Me.Snared.ID}) /return
    /if (${Me.PctHPs} < 90) /return
    /if (!${PullAbility.Equal[Melee]}) {
        /if (!(${Me.CombatAbilityReady[${PullAbility}]} || ${Me.AbilityReady[${PullAbility}]} || ${Me.AltAbilityReady[${PullAbility}]} || ${Me.SpellReady[${PullAbility}]})) /return
    }
    /varset PullTargetID ${SpawnSort[1,asc,PathLength,npc targetable noalert 1 radius ${AggressiveRadius} zradius ${AssistRangeZ}].ID}

    /if (!${PullTargetID}) /return

    /if (${Spawn[id ${PullTargetID}].Distance} > ${PullDistance} || !${Spawn[id ${PullTargetID}].LineOfSight}) {
        /nav id ${PullTargetID}
        /while (${Navigation.Active}) {
            /if (${Spawn[id ${PullTargetID}].LineOfSight}) {
                /target id ${PullTargetID}
                 /delay 1s ${Target.ID} == ${PullTargetID}
                  /if (${Target.ID} == ${PullTargetID}) {
                    /if (${validate_mob[${PullTargetID}]} && ${validate_single_pull[${PullTargetID}]}) /nav stop
                }
            }
      
            /if (${Navigation.Active} && ${Me.XTarget}) /nav stop
             /if (${Navigation.Active} && ${Spawn[id ${PullTargetID}].Distance} <= ${PullDistance} && ${Spawn[id ${PullTargetID}].LineOfSight}) /nav stop
        }
    } else {
        /target id ${PullTargetID}
    }
    /delay 3s !${Me.Moving}
    /delay 5
    /if (${PullAbility.Equal[Melee]} && !${Me.XTarget} && ${Target.ID}) {
        /attack on
        /if (${Me.Pet.ID} && ${Me.Pet.Combat}) /pet back
    } else /if (!${PullAbility.Equal[Melee]} && !${Me.XTarget} && ${Target.ID}) {
         /call CastSpell "${PullAbility}" ${PullTargetID} Pull
    }

    /nav locxyz ${PullAutoCampX} ${PullAutoCampY} ${PullAutoCampZ}

    /while (${Navigation.Active}) {
        /if (${Me.Pet.ID} && ${Me.Pet.Combat}) /pet back
        /if (${Math.Distance[${Me.Y},${Me.X},${Me.Z}:${PullAutoCampY},${PullAutoCampX},${PullAutoCampZ}]} < 10 && ${Navigation.Active}) /nav stop
    }

    /if (${Target.ID}) /face fast
    /if (${Defined[PullTargetID]}) /deletevar PullTargetID
    /if (${Defined[PathLength]}) /deletevar PathLength
    /delay 5
/return

Sub validate_mob(int _tmpID)
    /declare locX           int local   ${Spawn[id ${_tmpID}].X}
    /declare locY           int local   ${Spawn[id ${_tmpID}].Y}
    /declare _groupCount    int local   ${SpawnCount[loc ${locX} ${locY} radius 75 pc group notid ${Me.ID}]}
    /declare _pcCount       int local   ${SpawnCount[loc ${locX} ${locY} radius 75 pc notid ${Me.ID}]}

    /varcalc _pcCount ${_pcCount} - ${_groupCount}
    /if (${_pcCount} > 0) /return TRUE
    /if (${Me.TargetOfTarget.Name.NotEqual[${Me.DisplayName}]}) /return TRUE
/return FALSE

Sub validate_single_pull(int _tmpID)
    /declare locX           int local   ${Spawn[id ${_tmpID}].X}
    /declare locY           int local   ${Spawn[id ${_tmpID}].Y}
    /declare _addCount      int local   ${SpawnCount[loc ${locX} ${locY} radius 65 npc targetable noalert 1]}
    /if (${_addCount} > 1) /return TRUE
/return FALSE

| /if (${Me.Book[${Touch3}]} && !${Me.Book[${Terror1}]} && !${Me.Book[${Terror2}]}) {
    | /varset PullAbility ${Touch3}
    | /varset PullDistance 190
| } else /if (${Me.Book[${Terror1}]}) {
    | /varset PullAbility ${Terror1}
    | /varset PullDistance 190
| } else /if (${Me.Book[${Terror2}]}) {
    | /varset PullAbility ${Terror2}
    | /varset PullDistance 190
| } else {
    | /varset PullAbility Melee
    | /varset PullDistance 5
| }